{
    "id": "e8ae9c556864dd5fca6d5eea3cc062c0",
    "name": "Postman Echo",
    "description": null,
    "auth": null,
    "events": null,
    "variables": [],
    "order": [],
    "folders_order": [],
    "folders": [],
    "requests": [
        {
            "id": "277d93b26e4fbd32116a028661d90acb",
            "name": "DigestAuth Request",
            "url": "http:\/\/echo.getpostman.com\/\/digest-auth",
            "description": "Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\nThe `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n\nWhen this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https:\/\/",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "f4b26fcb9f6f22e11f7a47e22a659f10",
            "name": "Basic Auth",
            "url": "http:\/\/echo.getpostman.com\/\/basic-auth",
            "description": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username an",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "4a6544aa755b374c20405a4b9fd778e8",
            "name": "OAuth1.0 Verify Signature",
            "url": "http:\/\/echo.getpostman.com\/\/oauth1",
            "description": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_str",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "54642638adade9491f10bebdb3264810",
            "name": "Hawk Auth",
            "url": "http:\/\/echo.getpostman.com\/\/auth\/hawk",
            "description": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https:\/\/github.com\/hueniverse\/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xru",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "7c44d65599b9776f274fc0a66d3916f3",
            "name": "Set Cookies",
            "url": "http:\/\/echo.getpostman.com\/\/cookies\/set",
            "description": "The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n\nTo set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "foo1",
                    "description": "",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "foo2",
                    "description": "",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "c2ef1f8fe3ce2d69e074719b85c82e98",
            "name": "Delete Cookies",
            "url": "http:\/\/echo.getpostman.com\/\/cookies\/delete",
            "description": "One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "foo1",
                    "description": "",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "1fce6e3274f6c8cf77754df0539630a7",
            "name": "Get Cookies",
            "url": "http:\/\/echo.getpostman.com\/\/cookies",
            "description": "Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "71d0a9a72140f9598269762c196ddb80",
            "name": "Request Headers",
            "url": "http:\/\/echo.getpostman.com\/\/headers",
            "description": "A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\nIn Postman, sending your own set of headers through the [Headers tab](https:\/\/www.getpostman.com\/docs\/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "dbf99f1882224e3b3e5aff6feac6eed1",
            "name": "Response Headers",
            "url": "http:\/\/echo.getpostman.com\/\/response-headers",
            "description": "This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n\nTo send your own set of headers, simply add or replace the the URL parameters with your own set.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "Content-Type",
                    "description": "",
                    "value": "",
                    "equals": true,
                    "enabled": true
                },
                {
                    "key": "test",
                    "description": "",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "a39396e1bca72e520bdf8e64f5f3c9e2",
            "name": "GET Request",
            "url": "http:\/\/echo.getpostman.com\/\/get",
            "description": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http:\/\/example.com\/hi\/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [
                {
                    "key": "test",
                    "description": "",
                    "value": "",
                    "equals": true,
                    "enabled": true
                }
            ],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "bd407af9257842efb4ec5ed96a8afc12",
            "name": "POST Request",
            "url": "http:\/\/echo.getpostman.com\/\/post",
            "description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST \/hi\/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of th",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "post",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "291eaa694eabb4208e953b99d0a2df34",
            "name": "PUT Request",
            "url": "http:\/\/echo.getpostman.com\/\/put",
            "description": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT \/hi\/there?hand=wave\n>\n> <request-body>\n\n\n",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "put",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "6964e21fba963acb92810628ff11fdd3",
            "name": "PATCH Request",
            "url": "http:\/\/echo.getpostman.com\/\/patch",
            "description": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "patch",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "0815f2ac34b2a45fbc7486106b3996ba",
            "name": "DELETE Request",
            "url": "http:\/\/echo.getpostman.com\/\/delete",
            "description": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "delete",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "36a12aeb058b8c4d658330aacb3f7f02",
            "name": "Response Status Code",
            "url": "http:\/\/echo.getpostman.com\/\/status\/200",
            "description": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https:\/\/en.wikipedia.org\/wiki\/List_of_HTTP_status_",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "bdbcfef6cfebd1521b4722998d7a40d4",
            "name": "Streamed Response",
            "url": "http:\/\/echo.getpostman.com\/\/stream\/10",
            "description": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https:\/\/en.wikipedia.org\/wiki\/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "19793cc46bf3da2c24e4d65de14294bf",
            "name": "Delay Response",
            "url": "http:\/\/echo.getpostman.com\/\/delay\/3",
            "description": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "971d22db4c2efe2fe88c83a439b95954",
            "name": "Get UTF8 Encoded Response",
            "url": "http:\/\/echo.getpostman.com\/\/encoding\/utf8",
            "description": "If a response of an endpoint requires to send data beyond the basic English \/ ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "6aa9c1c71d1a0d1b3470ca31acfb80c0",
            "name": "GZip Compressed Response",
            "url": "http:\/\/echo.getpostman.com\/\/gzip",
            "description": "This endpoint returns the response using [gzip compression algoritm](https:\/\/en.wikipedia.org\/wiki\/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed forma",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        },
        {
            "id": "30a75a0b2b4ce5ec43875cdf2b8322e8",
            "name": "Deflate Compressed Response",
            "url": "http:\/\/echo.getpostman.com\/\/deflate",
            "description": "This endpoint returns the response using [deflate compression algoritm](https:\/\/en.wikipedia.org\/wiki\/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compre",
            "data": [],
            "dataMode": "raw",
            "headerData": null,
            "method": "get",
            "pathVariableData": [],
            "queryParams": [],
            "auth": null,
            "events": null,
            "folder": null,
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "responses": [],
            "currentHelper": null,
            "helperAttributes": null,
            "collectionId": "e8ae9c556864dd5fca6d5eea3cc062c0",
            "rawModeData": ""
        }
    ]
}